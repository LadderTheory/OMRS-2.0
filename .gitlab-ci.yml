stages:
  - test
  - build
  - deploy

test:
 stage: test
 image: 192.168.1.78:31779/ironbanknode12
 script:
  - cd ./frontend && npm install
  - npm test
  - npm run sonar
 
 #script: sonar-scanner -Dsonar.projectKey=omrs-prototype -Dsonar.sources=. -Dsonar.host.url=http://192.168.1.78:31264 -Dsonar.login=${SONAR} -Dsonar.testExecutionReportPaths=./frontend/test-report.xml -Dsonar.javascript.lcov.reportPaths=./frontend/lcov.info
 #The below scanner script is used only for tracking historic metrics on the scan results
 #script: sonar-scanner -Dsonar.projectKey=sonar-test -Dsonar.sources=. -Dsonar.host.url=http://192.168.1.78:31264 -Dsonar.login=${SONAR} #-Dsonar.qualitygate.wait=true

build:
  stage: build
  image: 192.168.1.78:31779/docker:latest
  services:
  - name: 192.168.1.78:31779/dind:latest
    alias: docker
    entrypoint: ["env", "-u", "DOCKER_HOST"]
    command: ["dockerd-entrypoint.sh", "--insecure-registry=192.168.1.78:31779"]
  variables: 
    DOCKER_TLS_CERTDIR: ''
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
  script:
    - sed -i "s/<TOKEN>/${NPM_TOKEN}/g" .npmrc 
    - docker login 192.168.1.78:31779 -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker pull 192.168.1.78:31779/omrs-prototype:latest || true
    - docker build --cache-from 192.168.1.78:31779/omrs-prototype:latest --tag 192.168.1.78:31779/omrs-prototype:latest .
    - docker push 192.168.1.78:31779/omrs-prototype:latest

deploy:
  stage: deploy
  image: 192.168.1.78:31779/kubectl:latest
  script:
     - kubectl config set-cluster sst-microk8s --server="${SERVER}"
     - kubectl config set clusters.sst-microk8s.certificate-authority-data ${CAD}
     - kubectl config set-credentials sst-microk8s --token="${TOKEN}"
     - kubectl config set-context sst-microk8s --cluster=sst-microk8s --user=sst-microk8s
     - kubectl config use-context sst-microk8s
     - kubectl config current-context
     - kubectl delete deployments omrs-prototype
     - kubectl apply -f deploy.yaml
     - kubectl apply -f service.yaml
     - kubectl apply -f ingress.yaml


    